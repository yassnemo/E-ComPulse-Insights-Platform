name: E-ComPulse Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AWS_REGION: us-west-2
  # ECR_REPOSITORY_BASE will be set dynamically in jobs that need it
  # ECR_REPOSITORY_BASE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [synthetic-generator, spark-streaming, web-tracker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      if: matrix.component == 'synthetic-generator'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      if: matrix.component == 'web-tracker'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Java
      if: matrix.component == 'spark-streaming'
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Setup SBT
      if: matrix.component == 'spark-streaming'
      run: |
        echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
        echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
        curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
        sudo apt-get update
        sudo apt-get install sbt
    
    - name: Cache SBT dependencies
      if: matrix.component == 'spark-streaming'
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-
    
    - name: Cache Python dependencies
      if: matrix.component == 'synthetic-generator'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Cache Node.js dependencies
      if: matrix.component == 'web-tracker'
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Python dependencies
      if: matrix.component == 'synthetic-generator'
      run: |
        cd data-ingestion/synthetic-generator
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install Node.js dependencies
      if: matrix.component == 'web-tracker'
      run: |
        cd data-ingestion/web-tracker
        npm install
    
    - name: Run Python tests
      if: matrix.component == 'synthetic-generator'
      run: |
        cd data-ingestion/synthetic-generator
        pytest tests/ --cov=. --cov-report=xml
    
    - name: Run JavaScript tests
      if: matrix.component == 'web-tracker'
      run: |
        cd data-ingestion/web-tracker
        npm test
    
    - name: Run Scala tests
      if: matrix.component == 'spark-streaming'
      run: |
        cd spark-streaming
        echo "Checking SBT installation..."
        sbt sbtVersion
        echo "Checking Java version..."
        java -version
        echo "Cleaning and compiling..."
        sbt clean compile
        echo "Running tests..."
        sbt test
      env:
        SBT_OPTS: "-Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M"
    
    - name: Generate Scala test coverage
      if: matrix.component == 'spark-streaming'
      run: |
        cd spark-streaming
        echo "Generating coverage report..."
        sbt coverage test coverageReport
      env:
        SBT_OPTS: "-Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M"
    
    - name: Upload Scala coverage to Codecov
      if: matrix.component == 'spark-streaming'
      uses: codecov/codecov-action@v3
      with:
        file: ./spark-streaming/target/scala-*/scoverage-report/cobertura.xml
        flags: spark-streaming
    
    - name: Upload coverage to Codecov
      if: matrix.component == 'synthetic-generator'
      uses: codecov/codecov-action@v3
      with:
        file: ./data-ingestion/synthetic-generator/coverage.xml
        flags: synthetic-generator

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        component:
          - name: synthetic-generator
            path: data-ingestion/synthetic-generator
            image: ecompulse/synthetic-generator
          - name: spark-enrichment
            path: spark-streaming
            image: ecompulse/spark-enrichment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REPOSITORY_BASE }}/${{ matrix.component.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component.path }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REPOSITORY_BASE }}/${{ matrix.component.image }}:latest
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init
    
    - name: Terraform Plan
      working-directory: infrastructure
      run: |
        terraform plan -var-file=environments/staging.tfvars -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
    
    - name: Comment PR with plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('infrastructure/tfplan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const body = plan.length > maxGitHubBodyCharacters ? 
            `\`\`\`terraform\n${plan.substring(0, maxGitHubBodyCharacters)}\n\`\`\`\n\n*Plan truncated due to size limit.*` :
            `\`\`\`terraform\n${plan}\n\`\`\``;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,            repo: context.repo.repo,
            body: `## Terraform Plan ðŸ“‹\n\n${body}`
          });

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    # environment: 
    #   name: staging
    #   url: https://staging.ecompulse.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Make deploy script executable
      run: chmod +x scripts/deploy.sh
    
    - name: Deploy to staging
      run: |
        export AWS_REGION=${{ env.AWS_REGION }}
        ./scripts/deploy.sh staging
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available deployment --all -n ecompulse --timeout=600s
        
        # Run basic health checks
        kubectl get pods -n ecompulse
        kubectl get services -n ecompulse
        
        # Test API endpoints (if available)
        echo "Staging deployment completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')    # environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Make deploy script executable
      run: chmod +x scripts/deploy.sh
    
    - name: Deploy to production
      run: |
        export AWS_REGION=${{ env.AWS_REGION }}
        ./scripts/deploy.sh production
    
    - name: Run production tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available deployment --all -n ecompulse --timeout=600s
        
        # Run comprehensive health checks
        kubectl get pods -n ecompulse
        kubectl get services -n ecompulse
        kubectl get hpa -n ecompulse
        
        # Verify monitoring stack
        kubectl get pods -n monitoring
        
        echo "Production deployment completed successfully"
    
    - name: Notify Slack
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'deployments'
        slack-message: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'production'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0
    
    - name: Make deploy script executable
      run: chmod +x scripts/deploy.sh
    
    - name: Deploy to ${{ github.event.inputs.environment }}
      run: |
        export AWS_REGION=${{ env.AWS_REGION }}
        ./scripts/deploy.sh ${{ github.event.inputs.environment }}
    
    - name: Verify deployment
      run: |
        kubectl wait --for=condition=available deployment --all -n ecompulse --timeout=600s
        kubectl get all -n ecompulse
        echo "Deployment to ${{ github.event.inputs.environment }} completed successfully"
